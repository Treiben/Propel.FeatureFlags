services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: propel-postgres
    environment:
      POSTGRES_DB: propel
      POSTGRES_USER: propel_user
      POSTGRES_PASSWORD: propel_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - propel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U propel_user -d propel"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: propel-sqlserver
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "Propel_Password123!"
      MSSQL_PID: "Developer"
    volumes:
      - sqlserver_data:/var/opt/mssql
    ports:
      - "1433:1433"
    networks:
      - propel-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Propel_Password123! -C -Q 'SELECT 1' -b -o /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7.2
    container_name: propel-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - propel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Commander for managing Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: propel-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8090:8080"
    networks:
      - propel-network
    depends_on:
      - redis


  # Propel Demo Api
  propel.demo.api:
    image: ${DOCKER_REGISTRY-}propel-demo-api
    container_name: propel-demo-api
    build:
      context: .
      dockerfile: DemoWebApi/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080 
      - POSTGRES_DB=propel
      - POSTGRES_USER=propel_user
      - POSTGRES_PASSWORD=propel_password
      - REDIS_PASSWORD=
    ports:
      - "5001:8080"
    networks:
      - propel-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./DemoWebApi/appsettings.json
        target: /app/appsettings.json
        read_only: true

  # Propel Demo Worker
  propel.demo.worker:
    image: ${DOCKER_REGISTRY-}propel-demo-worker
    container_name: propel-demo-worker
    build:
      context: .
      dockerfile: DemoWorker/Dockerfile
    environment:
      - DOTNET_ENVIRONMENT=Development
      - SQLSERVER_SERVER=sqlserver
      - SQLSERVER_DATABASE=propel_feature_flags
      - SQLSERVER_USER=sa
      - SQLSERVER_PASSWORD=Propel_Password123!
      - REDIS_PASSWORD=
    networks:
      - propel-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      propel.demo.api:
        condition: service_started
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./DemoWorker/appsettings.json
        target: /app/appsettings.json
        read_only: true


volumes:
  postgres_data:
  redis_data:
  sqlserver_data:

networks:
  propel-network:
    driver: bridge

