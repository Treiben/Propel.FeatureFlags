@Ui_Api_HostAddress_Https = https://localhost:7113
@Ui_Api_HostAddress_Http = http://localhost:5038
@Ui_Api_HostAddress_Docker = http://localhost:5003

### Variables
@baseUrl = {{Ui_Api_HostAddress_Docker}}/api
@testFlagKey = test-flag-4851245
@testUserId = user-{{$randomInt}}

### Authentication Tokens
### dotnet user-jwts create --scope "featuretogglesmanagementapi" --name "ApiScopeUser" --project "ui/FeatureToggles.Management.Api"
### dotnet user-jwts create --scope "featuretogglesmanagementapi" --scope "read" --name "ReadUser" --project "ui/FeatureToggles.Management.Api"
### dotnet user-jwts create --scope "featuretogglesmanagementapi" --scope "read" --scope "write" --name "WriteUser" --project "ui/FeatureToggles.Management.Api"
### dotnet user-jwts create --scope "featuretogglesmanagementapi" --scope "read" --scope "write" --claim "sub=test-user-123" --claim "name=Test User" --claim "email=test@example.com" --name "FullAccessUser" --project "ui/FeatureToggles.Management.Api"
@api_jwt = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFwaVNjb3BlVXNlciIsInN1YiI6IkFwaVNjb3BlVXNlciIsImp0aSI6IjNhZWVjZWRlIiwic2NvcGUiOiJmZWF0dXJldG9nZ2xlc21hbmFnZW1lbnRhcGkiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo1MDM4IiwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzExMyJdLCJuYmYiOjE3NTM1MDAyNjEsImV4cCI6MTc2MTQ0OTA2MSwiaWF0IjoxNzUzNTAwMjYyLCJpc3MiOiJkb3RuZXQtdXNlci1qd3RzIn0.r1u7xaYjgAFoVsx6ddDJLtXIuYWlyUHAQC7UZkjojIw
@readonly_jwt =  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IlJlYWRVc2VyIiwic3ViIjoiUmVhZFVzZXIiLCJqdGkiOiI2MTczNDRlIiwic2NvcGUiOlsiZmVhdHVyZXRvZ2dsZXNtYW5hZ2VtZW50YXBpIiwicmVhZCJdLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo1MDM4IiwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzExMyJdLCJuYmYiOjE3NTM1MDAzNDgsImV4cCI6MTc2MTQ0OTE0OCwiaWF0IjoxNzUzNTAwMzQ5LCJpc3MiOiJkb3RuZXQtdXNlci1qd3RzIn0.YiW9_-swA8YXVaukSsKiZg-us_3YW0QCGwMtWb-HB4M
@full_access_jwt = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IldyaXRlVXNlciIsInN1YiI6IldyaXRlVXNlciIsImp0aSI6IjkyZjZhNzNmIiwic2NvcGUiOlsiZmVhdHVyZXRvZ2dsZXNtYW5hZ2VtZW50YXBpIiwicmVhZCIsIndyaXRlIl0sImF1ZCI6WyJodHRwOi8vbG9jYWxob3N0OjUwMzgiLCJodHRwczovL2xvY2FsaG9zdDo3MTEzIl0sIm5iZiI6MTc1MzUwMDM3NCwiZXhwIjoxNzYxNDQ5MTc0LCJpYXQiOjE3NTM1MDAzNzQsImlzcyI6ImRvdG5ldC11c2VyLWp3dHMifQ.7_mWTTJ_Jbq1I6Kg65ulyEjTP5mb6VEfhJH1w3iOF0o

@active_token = {{full_access_jwt}}

### 0. Health Check - Live
# Test: Verify API is running and accessible
# Expected: 200 OK with status confirmation
GET {{baseUrl}}/health/live
Content-Type: application/json
Authorization: Bearer {{active_token}}

###
### 0. Health Check - Ready  
# Test: Verify API dependencies are healthy (database, cache)
# Expected: 200 OK with readiness status
GET {{baseUrl}}/health/ready
Content-Type: application/json
Authorization: Bearer {{active_token}}

###
### ================== SETUP TEST DATA FOR PAGING/FILTERING ==================

### Setup 1. Create Test Flags for Paging Tests
# Test: Create multiple flags for pagination testing
# Expected: 201 Created - Environment Production Flag
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "env-prod-flag-{{$randomInt}}",
  "name": "Production Environment Flag",
  "description": "Flag for production environment",
  "status": "Enabled",
  "tags": {
    "environment": "production",
    "team": "backend",
    "priority": "high"
  },
  "isPermanent": false
}

###
### Setup 2. Create Second Test Flag
# Test: Create second flag with different tags and status
# Expected: 201 Created - Environment Staging Flag
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "env-staging-flag-{{$randomInt}}",
  "name": "Staging Environment Flag",
  "description": "Flag for staging environment",
  "status": "Disabled",
  "tags": {
    "environment": "staging",
    "team": "frontend",
    "priority": "medium"
  },
  "isPermanent": false
}

###
### Setup 3. Create Third Test Flag
# Test: Create third flag for comprehensive testing
# Expected: 201 Created - Development Flag
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "env-dev-flag-{{$randomInt}}",
  "name": "Development Environment Flag",
  "description": "Flag for development environment",
  "status": "Percentage",
  "percentageEnabled": 50,
  "tags": {
    "environment": "development",
    "team": "backend",
    "priority": "low"
  },
  "isPermanent": false
}

###
### Setup 4. Create Fourth Test Flag
# Test: Create flag without environment tag
# Expected: 201 Created - Feature Flag without environment
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "feature-experimental-{{$randomInt}}",
  "name": "Experimental Feature Flag",
  "description": "Experimental feature flag",
  "status": "Scheduled",
  "tags": {
    "type": "experimental",
    "team": "research",
    "priority": "high"
  },
  "isPermanent": false
}

###
### ================== PAGING TESTS ==================

### Get All Flags
# Test: Get all flags
# Expected: 200 OK with all flags
GET {{baseUrl}}/feature-flags/all
Authorization: Bearer {{active_token}}

### Paging 1. Get First Page - Default Parameters
# Test: Get first page with default page size (10)
# Expected: 200 OK with PagedFeatureFlagsResponse, page=1, pageSize=10
GET {{baseUrl}}/feature-flags/
Authorization: Bearer {{active_token}}

###
### Paging 2. Get First Page - Custom Page Size
# Test: Get first page with custom page size
# Expected: 200 OK with PagedFeatureFlagsResponse, page=1, pageSize=5
GET {{baseUrl}}/feature-flags?page=1&pageSize=5
Authorization: Bearer {{active_token}}

###
### Paging 3. Get Second Page
# Test: Get second page to verify pagination works
# Expected: 200 OK with PagedFeatureFlagsResponse, page=2, pageSize=5
GET {{baseUrl}}/feature-flags?page=2&pageSize=5
Authorization: Bearer {{active_token}}

###
### Paging 4. Test Page Size Limit
# Test: Verify page size is limited to maximum allowed
# Expected: 200 OK with PagedFeatureFlagsResponse, pageSize should be capped at 100
GET {{baseUrl}}/feature-flags?page=1&pageSize=150
Authorization: Bearer {{active_token}}

###
### Paging 5. Test Invalid Page Number (0)
# Test: Verify page number validation (should default to 1)
# Expected: 400 Bad Request with validation error OR 200 OK with page defaulted to 1
GET {{baseUrl}}/feature-flags?page=0&pageSize=10
Authorization: Bearer {{active_token}}

###
### Paging 6. Test Invalid Page Number (Negative)
# Test: Verify negative page number validation
# Expected: 400 Bad Request with validation error
GET {{baseUrl}}/feature-flags?page=-1&pageSize=10
Authorization: Bearer {{active_token}}

###
### Paging 7. Test Invalid Page Size (0)
# Test: Verify page size validation
# Expected: 400 Bad Request with validation error
GET {{baseUrl}}/feature-flags?page=1&pageSize=0
Authorization: Bearer {{active_token}}

###
### Paging 8. Test Invalid Page Size (Negative)
# Test: Verify negative page size validation
# Expected: 400 Bad Request with validation error
GET {{baseUrl}}/feature-flags?page=1&pageSize=-5
Authorization: Bearer {{active_token}}

###
### ================== STATUS FILTERING TESTS ==================

### Filter 1. Filter by Status - Enabled
# Test: Filter flags by Enabled status
# Expected: 200 OK with PagedFeatureFlagsResponse containing only Enabled flags
GET {{baseUrl}}/feature-flags?status=Enabled
Authorization: Bearer {{active_token}}

###
### Filter 2. Filter by Status - Disabled
# Test: Filter flags by Disabled status
# Expected: 200 OK with PagedFeatureFlagsResponse containing only Disabled flags
GET {{baseUrl}}/feature-flags?status=Disabled
Authorization: Bearer {{active_token}}

###
### Filter 3. Filter by Status - Percentage
# Test: Filter flags by Percentage status
# Expected: 200 OK with PagedFeatureFlagsResponse containing only Percentage flags
GET {{baseUrl}}/feature-flags?status=Percentage
Authorization: Bearer {{active_token}}

###
### Filter 4. Filter by Status - Scheduled
# Test: Filter flags by Scheduled status
# Expected: 200 OK with PagedFeatureFlagsResponse containing only Scheduled flags
GET {{baseUrl}}/feature-flags?status=Scheduled
Authorization: Bearer {{active_token}}

###
### Filter 5. Filter by Invalid Status
# Test: Verify validation fails for invalid status values
# Expected: 400 Bad Request with validation error about valid status values
GET {{baseUrl}}/feature-flags?status=InvalidStatus
Authorization: Bearer {{active_token}}

###
### Filter 6. Filter by Status with Pagination
# Test: Combine status filtering with pagination
# Expected: 200 OK with paginated results for specific status
GET {{baseUrl}}/feature-flags?status=Enabled&page=1&pageSize=3
Authorization: Bearer {{active_token}}

###
### ================== TAG FILTERING TESTS ==================

### Tag Filter 1. Filter by Single Tag (Key:Value Format)
# Test: Filter flags by environment:production tag
# Expected: 200 OK with flags that have environment=production tag
GET {{baseUrl}}/feature-flags?tags=environment:production
Authorization: Bearer {{active_token}}

###
### Tag Filter 2. Filter by Multiple Tags (Key:Value Format)
# Test: Filter flags by multiple tags using key:value format
# Expected: 200 OK with flags matching both environment=production AND team=backend
GET {{baseUrl}}/feature-flags?tags=environment:production&tags=team:backend
Authorization: Bearer {{active_token}}

###
### Tag Filter 3. Filter by Tag Key Only
# Test: Filter flags by tag key only (any value)
# Expected: 200 OK with flags that have 'environment' tag (any value)
GET {{baseUrl}}/feature-flags?tags=environment
Authorization: Bearer {{active_token}}

###
### Tag Filter 4. Filter by Tag Keys/Values Arrays
# Test: Filter using parallel tagKeys and tagValues arrays
# Expected: 200 OK with flags matching environment=staging
GET {{baseUrl}}/feature-flags?tagKeys=environment&tagValues=staging
Authorization: Bearer {{active_token}}

###
### Tag Filter 5. Filter by Multiple Tag Keys/Values Arrays
# Test: Filter using multiple tagKeys and tagValues
# Expected: 200 OK with flags matching environment=development AND team=backend
GET {{baseUrl}}/feature-flags?tagKeys=environment&tagKeys=team&tagValues=development&tagValues=backend
Authorization: Bearer {{active_token}}

###
### Tag Filter 6. Filter by Tag Key Only (Keys/Values Arrays)
# Test: Filter by tag key without corresponding value
# Expected: 200 OK with flags that have 'priority' tag (any value)
GET {{baseUrl}}/feature-flags?tagKeys=priority
Authorization: Bearer {{active_token}}

###
### Tag Filter 7. Mismatched TagKeys and TagValues Arrays
# Test: Verify validation when tagKeys and tagValues have different lengths
# Expected: 400 Bad Request with validation error about array length mismatch
GET {{baseUrl}}/feature-flags?tagKeys=environment&tagKeys=team&tagValues=production
Authorization: Bearer {{active_token}}

###
### Tag Filter 8. Invalid Tag Format
# Test: Verify validation for malformed tag format
# Expected: 400 Bad Request with validation error about tag format
GET {{baseUrl}}/feature-flags?tags=:invalid-format
Authorization: Bearer {{active_token}}

###
### Tag Filter 9. Empty Tag Value
# Test: Test empty tag values (should work as key-only search)
# Expected: 200 OK with flags that have the specified tag key
GET {{baseUrl}}/feature-flags?tags=team:
Authorization: Bearer {{active_token}}

###
### ================== COMBINED FILTERING TESTS ==================

### Combined 1. Status + Tag Filtering
# Test: Combine status and tag filtering
# Expected: 200 OK with flags that are Enabled AND have environment=production
GET {{baseUrl}}/feature-flags?status=Enabled&tags=environment:production
Authorization: Bearer {{active_token}}

###
### Combined 2. Status + Multiple Tags + Pagination
# Test: Combine all filtering options with pagination
# Expected: 200 OK with paginated results for complex filter
GET {{baseUrl}}/feature-flags?status=Enabled&tags=environment:production&tags=team:backend&page=1&pageSize=2
Authorization: Bearer {{active_token}}

###
### Combined 3. Tag Filtering + Pagination (Large Page)
# Test: Tag filtering with larger page size
# Expected: 200 OK with tag-filtered results in larger page
GET {{baseUrl}}/feature-flags?tags=team:backend&page=1&pageSize=20
Authorization: Bearer {{active_token}}

###
### Combined 4. Multiple Tags with Different Formats
# Test: Mix key:value and key-only tag filters
# Expected: 200 OK with flags matching environment=staging AND having priority tag (any value)
GET {{baseUrl}}/feature-flags?tags=environment:staging&tags=priority
Authorization: Bearer {{active_token}}

###
### ================== EDGE CASES AND VALIDATION ==================

### Edge 1. No Results Found
# Test: Filter that should return no results
# Expected: 200 OK with empty items array, totalCount=0
GET {{baseUrl}}/feature-flags?status=Enabled&tags=environment:nonexistent
Authorization: Bearer {{active_token}}

###
### Edge 2. Very Large Page Number
# Test: Request page that doesn't exist
# Expected: 200 OK with empty items array, but valid pagination metadata
GET {{baseUrl}}/feature-flags?page=999&pageSize=10
Authorization: Bearer {{active_token}}

###
### Edge 3. Case Sensitivity - Status
# Test: Verify status filtering is case-insensitive or properly handled
# Expected: 200 OK (if case-insensitive) OR 400 Bad Request (if case-sensitive)
GET {{baseUrl}}/feature-flags?status=enabled
Authorization: Bearer {{active_token}}

###
### Edge 4. Special Characters in Tag Values
# Test: Tag values with special characters
# Expected: 200 OK with proper handling of special characters
GET {{baseUrl}}/feature-flags?tags=description:test%20flag%20with%20spaces
Authorization: Bearer {{active_token}}

###
### Edge 5. Unicode Characters in Tag Values
# Test: Tag values with unicode characters
# Expected: 200 OK with proper unicode handling
GET {{baseUrl}}/feature-flags?tags=team:测试团队
Authorization: Bearer {{active_token}}

###
### ================== RESPONSE VALIDATION TESTS ==================

### Response 1. Verify Pagination Metadata
# Test: Ensure all pagination fields are present and correct
# Expected: 200 OK with complete PagedFeatureFlagsResponse structure
GET {{baseUrl}}/feature-flags?page=1&pageSize=3
Authorization: Bearer {{active_token}}

###
### Response 2. Verify Empty Results Structure
# Test: Ensure proper structure when no results found
# Expected: 200 OK with empty items but valid pagination structure
GET {{baseUrl}}/feature-flags?tags=nonexistent:tag
Authorization: Bearer {{active_token}}

###
### Response 3. Verify FeatureFlagDto Structure
# Test: Ensure complete FeatureFlagDto structure in response
# Expected: 200 OK with properly structured FeatureFlagDto objects
GET {{baseUrl}}/feature-flags?pageSize=1
Authorization: Bearer {{active_token}}

###
### ================== PERFORMANCE TESTS ==================

### Performance 1. Large Page Size
# Test: Request maximum allowed page size
# Expected: 200 OK with good response time for 100 items
GET {{baseUrl}}/feature-flags?page=1&pageSize=100
Authorization: Bearer {{active_token}}

###
### Performance 2. Complex Multi-Tag Filter
# Test: Filter with multiple complex tag combinations
# Expected: 200 OK with reasonable response time
GET {{baseUrl}}/feature-flags?tags=environment:production&tags=team:backend&tags=priority:high&status=Enabled
Authorization: Bearer {{active_token}}

###
### ================== BACKWARD COMPATIBILITY TESTS ==================

### Compat 1. Old GetAll Endpoint Still Works
# Test: Verify /all endpoint still functions for backward compatibility
# Expected: 200 OK with List<FeatureFlagDto> (not paged response)
GET {{baseUrl}}/feature-flags/all
Authorization: Bearer {{active_token}}

###
### Compat 2. Compare Paged vs GetAll Results
# Test: Verify paged endpoint returns same data as GetAll when requesting all data
# Expected: First page with large pageSize should match /all results
GET {{baseUrl}}/feature-flags?page=1&pageSize=1000
Authorization: Bearer {{active_token}}

###
### ================== EXISTING TESTS (KEEP ALL ORIGINAL TESTS) ==================

### 1. Create Feature Flag - Valid Request
# Test: Create a new feature flag with valid data
# Expected: 201 Created with FeatureFlagDto response
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "{{testFlagKey}}",
  "name": "Test Feature Flag",
  "description": "A test feature flag for API testing",
  "status": "Disabled",
  "percentageEnabled": 0,
  "variations": {
    "on": true,
    "off": false
  },
  "defaultVariation": "off",
  "tags": {
    "environment": "test",
    "team": "platform"
  },
  "isPermanent": false
}

###
### 2. Create Feature Flag - Validation Error (Empty Key)
# Test: Verify validation fails for empty key
# Expected: 400 Bad Request with validation problem details
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "",
  "name": "Invalid Flag",
  "description": "Should fail validation"
}

###
### 3. Create Feature Flag - Conflict (Duplicate Key)
# Test: Verify conflict response for duplicate flag key
# Expected: 409 Conflict with problem details about existing flag
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "{{testFlagKey}}",
  "name": "Duplicate Flag",
  "description": "Should conflict with existing flag"
}

###
### 4. Get All Feature Flags
# Test: Retrieve all feature flags from the system
# Expected: 200 OK with List<FeatureFlagDto> containing all flags
GET {{baseUrl}}/feature-flags/all
Authorization: Bearer {{active_token}}

###
### 5. Get Specific Feature Flag
# Test: Retrieve a specific flag by key
# Expected: 200 OK with FeatureFlagDto for the requested flag
GET {{baseUrl}}/feature-flags/{{testFlagKey}}
Authorization: Bearer {{active_token}}

###
### 6. Get Non-existent Feature Flag
# Test: Verify proper error handling for missing flag
# Expected: 404 Not Found with problem details
GET {{baseUrl}}/feature-flags/non-existent-flag
Authorization: Bearer {{active_token}}

###
### 7. Enable Feature Flag - Valid Request
# Test: Enable a feature flag with reason
# Expected: 200 OK with updated FeatureFlagDto (status: "Enabled")
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/enable
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "reason": "Enabling for testing purposes"
}

###
### 8. Enable Feature Flag - Missing Reason
# Test: Verify validation fails for empty reason
# Expected: 400 Bad Request with validation problem details
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/enable
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "reason": ""
}

###
### 9. Disable Feature Flag - Valid Request
# Test: Disable a feature flag with reason
# Expected: 200 OK with updated FeatureFlagDto (status: "Disabled")
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/disable
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "reason": "Disabling after testing"
}

###
### 10. Schedule Feature Flag - Valid Future Dates
# Test: Schedule flag to enable and disable at future dates
# Expected: 200 OK with updated FeatureFlagDto (status: "Scheduled")
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/schedule
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "enableDate": "{{$datetime iso8601 1 d}}",
  "disableDate": "{{$datetime iso8601 7 d}}"
}

###
### 11. Schedule Feature Flag - Past Date Validation
# Test: Verify validation fails for past enable date
# Expected: 400 Bad Request with validation problem details
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/schedule
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "enableDate": "{{$datetime iso8601 -1 d}}"
}

###
### 12. Modify Feature Flag - Full Update
# Test: Update all modifiable properties of a feature flag
# Expected: 200 OK with updated FeatureFlagDto reflecting all changes
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "name": "Updated Test Feature Flag",
  "description": "Updated description for testing",
  "status": "Enabled",
  "percentageEnabled": 50,
  "windowStartTime": "09:00:00",
  "windowEndTime": "17:00:00",
  "timeZone": "UTC",
  "windowDays": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
  "targetingRules": [
    {
      "attribute": "department",
      "operator": "In",
      "values": ["engineering", "qa"],
      "variation": "on"
    }
  ],
  "enabledUsers": ["{{testUserId}}"],
  "variations": {
    "on": true,
    "off": false,
    "beta": "beta-value"
  },
  "defaultVariation": "off",
  "tags": {
    "environment": "test",
    "team": "platform",
    "version": "v2"
  }
}

###
### 13. Modify Feature Flag - Partial Update
# Test: Update only specific properties (name and percentage)
# Expected: 200 OK with FeatureFlagDto showing only specified changes
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "name": "Partially Updated Flag",
  "percentageEnabled": 75
}

###
### 14. Set Flag Percentage - Valid Percentage
# Test: Set flag to percentage rollout mode
# Expected: 200 OK with FeatureFlagDto (status: "Percentage", percentageEnabled: 50)
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/percentage
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "percentage": 50
}

###
### 15. Enable Flag for Users - Valid User List
# Test: Enable flag for specific users
# Expected: 200 OK with FeatureFlagDto showing users in enabledUsers list
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/users/enable
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "userIds": ["{{testUserId}}", "user-123", "user-456"]
}

###
### 16. Enable Flag for Users - Empty User List Validation
# Test: Verify validation fails for empty user list
# Expected: 400 Bad Request with validation problem details
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/users/enable
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "userIds": []
}

###
### 17. Disable Flag for Users - Valid Request
# Test: Disable flag for specific users
# Expected: 200 OK with FeatureFlagDto showing users in disabledUsers list
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/users/disable
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "userIds": ["user-123"]
}

###
### 18. Search Flags - No Parameters (Get All)
# Test: Search without filters returns all flags
# Expected: 200 OK with List<FeatureFlagDto> of all flags
GET {{baseUrl}}/feature-flags/search
Authorization: Bearer {{active_token}}

###
### 19. Search Flags - Filter by Tag
# Test: Search flags by specific tag key:value
# Expected: 200 OK with List<FeatureFlagDto> matching tag filter
GET {{baseUrl}}/feature-flags/search?tag=environment:test
Authorization: Bearer {{active_token}}

###
### 20. Search Flags - Filter by Status
# Test: Search flags by status
# Expected: 200 OK with List<FeatureFlagDto> matching status filter
GET {{baseUrl}}/feature-flags/search?status=Enabled
Authorization: Bearer {{active_token}}

###
### 21. Search Flags - Multiple Filters
# Test: Search with both tag and status filters
# Expected: 200 OK with List<FeatureFlagDto> matching both filters
GET {{baseUrl}}/feature-flags/search?tag=team:platform&status=Disabled
Authorization: Bearer {{active_token}}

###
### 22. Search Flags - Invalid Status Validation
# Test: Verify validation fails for invalid status
# Expected: 400 Bad Request with problem details about valid status values
GET {{baseUrl}}/feature-flags/search?status=InvalidStatus
Authorization: Bearer {{active_token}}

###
### 23. Get Expiring Flags - Default (7 days)
# Test: Get flags expiring within default timeframe
# Expected: 200 OK with List<FeatureFlagDto> of flags expiring soon
GET {{baseUrl}}/feature-flags/expiring
Authorization: Bearer {{active_token}}

###
### 24. Get Expiring Flags - Custom Days
# Test: Get flags expiring within custom timeframe
# Expected: 200 OK with List<FeatureFlagDto> of flags expiring within 30 days
GET {{baseUrl}}/feature-flags/expiring?days=30
Authorization: Bearer {{active_token}}

###
### 25. Evaluate Single Flag - Basic
# Test: Evaluate flag for specific user
# Expected: 200 OK with EvaluationResult
GET {{baseUrl}}/feature-flags/evaluate/{{testFlagKey}}?userId={{testUserId}}
Authorization: Bearer {{active_token}}

###
### 26. Evaluate Single Flag - With Attributes
# Test: Evaluate flag with user attributes for targeting
# Expected: 200 OK with EvaluationResult based on targeting rules
GET {{baseUrl}}/feature-flags/evaluate/{{testFlagKey}}?userId={{testUserId}}&attributes={"department":"engineering","region":"us-west"}
Authorization: Bearer {{active_token}}

###
### 27. Evaluate Single Flag - Invalid Attributes JSON
# Test: Verify validation fails for malformed attributes JSON
# Expected: 400 Bad Request with problem details about JSON format
GET {{baseUrl}}/feature-flags/evaluate/{{testFlagKey}}?userId={{testUserId}}&attributes=invalid-json
Authorization: Bearer {{active_token}}

###
### 28. Evaluate Single Flag - Non-existent Flag
# Test: Verify flag created as default when flag key does not exist
# Expected: 200 flag created as default with EvaluationResult (defaultVariation: "off")
GET {{baseUrl}}/feature-flags/evaluate/non-existent-flag1?userId={{testUserId}}
Authorization: Bearer {{active_token}}

###
### 29. Evaluate Multiple Flags - Valid Request
# Test: Evaluate multiple flags in single request
# Expected: 200 OK with Dictionary<string, EvaluationResult>
POST {{baseUrl}}/feature-flags/evaluate
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "flagKeys": ["{{testFlagKey}}", "another-flag"],
  "userId": "{{testUserId}}",
  "attributes": {
    "department": "engineering",
    "subscription": "premium"
  }
}

###
### 30. Evaluate Multiple Flags - Empty Flag List
# Test: Verify validation fails for empty flag keys list
# Expected: 400 Bad Request with validation problem details
POST {{baseUrl}}/feature-flags/evaluate
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "flagKeys": [],
  "userId": "{{testUserId}}"
}

###
### 31. Create Additional Test Flag for Deletion
# Test: Create a non-permanent flag that can be deleted
# Expected: 201 Created with FeatureFlagDto
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "delete-test-flag",
  "name": "Flag to Delete",
  "description": "This flag will be deleted",
  "isPermanent": false
}

###
### 32. Delete Feature Flag - Valid Request
# Test: Delete a non-permanent feature flag
# Expected: 204 No Content
DELETE {{baseUrl}}/feature-flags/delete-test-flag
Authorization: Bearer {{active_token}}

###
### 33. Delete Non-existent Flag
# Test: Verify error handling for deleting missing flag
# Expected: 404 Not Found with problem details
DELETE {{baseUrl}}/feature-flags/non-existent-flag
Authorization: Bearer {{active_token}}

###
### 34. Create Permanent Flag for Delete Test
# Test: Create a permanent flag that cannot be deleted
# Expected: 201 Created with FeatureFlagDto (isPermanent: true)
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "permanent-test-flag",
  "name": "Permanent Flag",
  "description": "This flag cannot be deleted",
  "isPermanent": true
}

###
### 35. Try to Delete Permanent Flag
# Test: Verify permanent flags cannot be deleted
# Expected: 400 Bad Request with problem details about permanent flag
DELETE {{baseUrl}}/feature-flags/permanent-test-flag
Authorization: Bearer {{active_token}}

###
### 36. Create Flag with Expiration for Testing
# Test: Create flag with expiration date for lifecycle testing
# Expected: 201 Created with FeatureFlagDto including expirationDate
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "expiring-flag-{{$randomInt}}",
  "name": "Expiring Test Flag",
  "description": "This flag will expire soon",
  "expirationDate": "{{$datetime iso8601 3 d}}",
  "status": "Enabled"
}

###
### 37. Create Complex Flag with All Features
# Test: Create flag using all available configuration options
# Expected: 201 Created with comprehensive FeatureFlagDto
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "complex-flag-{{$randomInt}}",
  "name": "Complex Feature Flag",
  "description": "A feature flag with all possible configurations",
  "status": "TimeWindow",
  "expirationDate": "{{$datetime iso8601 30 d}}",
  "windowStartTime": "08:00:00",
  "windowEndTime": "20:00:00",
  "timeZone": "America/New_York",
  "windowDays": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
  "percentageEnabled": 25,
  "targetingRules": [
    {
      "attribute": "userType",
      "operator": "In",
      "values": ["premium", "enterprise"],
      "variation": "premium"
    },
    {
      "attribute": "region",
      "operator": "In",
      "values": ["us-east", "us-west"],
      "variation": "regional"
    }
  ],
  "enabledUsers": ["admin-user", "test-user"],
  "disabledUsers": ["banned-user"],
  "variations": {
    "off": false,
    "basic": "basic-feature",
    "premium": "premium-feature",
    "regional": "regional-feature"
  },
  "defaultVariation": "off",
  "tags": {
    "environment": "production",
    "team": "growth",
    "feature": "advanced",
    "priority": "high"
  },
  "isPermanent": false
}

###
### 38. Test Edge Cases - Very Long Key Validation
# Test: Verify validation fails for key exceeding length limit
# Expected: 400 Bad Request with validation problem details about key length
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "very-long-key-name-that-might-exceed-normal-limits-and-should-be-tested-for-validation-this-should-definitely-be-over-100-characters-{{$randomInt}}",
  "name": "Edge Case Flag",
  "description": "Testing long key validation"
}

###
### 39. Test Edge Cases - Invalid Key Characters
# Test: Verify validation fails for key with special characters
# Expected: 400 Bad Request with validation problem details about allowed characters
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "invalid@key#with$special%characters",
  "name": "Invalid Key Flag",
  "description": "Should fail validation due to special characters"
}

###
### 40. Test Percentage Validation - Over 100%
# Test: Verify validation fails for percentage over 100
# Expected: 400 Bad Request with validation problem details
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "invalid-percentage-flag",
  "name": "Invalid Percentage Flag",
  "percentageEnabled": 150
}

###
### 41. Test Percentage Validation - Negative Value
# Test: Verify validation fails for negative percentage
# Expected: 400 Bad Request with validation problem details
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "negative-percentage-flag",
  "name": "Negative Percentage Flag",
  "percentageEnabled": -10
}

###
### 42. Set Percentage - Edge Case 0% (Should Disable)
# Test: Verify 0% percentage sets status to Disabled
# Expected: 200 OK with FeatureFlagDto (status: "Disabled", percentageEnabled: 0)
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/percentage
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "percentage": 0
}

###
### 43. Set Percentage - Edge Case 100% (Should Enable)
# Test: Verify 100% percentage sets status to Enabled
# Expected: 200 OK with FeatureFlagDto (status: "Enabled", percentageEnabled: 100)
POST {{baseUrl}}/feature-flags/{{testFlagKey}}/percentage
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "percentage": 100
}

###
### 44. Test Authorization - Read Only Token
# Test: Verify read-only token cannot perform write operations
# Expected: 403 Forbidden
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{readonly_jwt}}

{
  "key": "unauthorized-flag",
  "name": "Should Fail",
  "description": "Read-only token should not be able to create flags"
}

###
### 45. Test Authorization - No Token
# Test: Verify requests without token are rejected
# Expected: 401 Unauthorized
GET {{baseUrl}}/flags

###
### 46. Cleanup - Delete Test Flags (Run at the end)
# Test: Clean up created test flags
# Expected: 204 No Content
DELETE {{baseUrl}}/feature-flags/{{testFlagKey}}
Authorization: Bearer {{active_token}}

###
### 47. Cleanup - Delete Permanent Flag (Should be done manually)
# Test: Verify test flag was deleted
# Expected: 404 Not Found
GET {{baseUrl}}/flags/{{testFlagKey}}
Authorization: Bearer {{active_token}}

###
### 48. Verify Deletion
# Test: Confirm flag no longer exists
# Expected: 404 Not Found with problem details
GET {{baseUrl}}/flags/{{testFlagKey}}
Authorization: Bearer {{active_token}}